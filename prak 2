{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4853e309",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, -5, 0.3, 6, -2, 4]\n",
      "['one', 'two', 'three']\n",
      "[True, True, True, False, True]\n"
     ]
    }
   ],
   "source": [
    "a = [1, 2, -5, 0.3, 6, -2, 4]  # numeric vector\n",
    "b = [\"one\", \"two\", \"three\"]     # character vector\n",
    "c = [True, True, True, False, True]  # logical vector\n",
    "print(a)\n",
    "print(b)\n",
    "print(c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e66ea189",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[  3  15]\n",
      " [-27  38]]\n"
     ]
    }
   ],
   "source": [
    "#MATRIKS\n",
    "import numpy as np\n",
    "cells = [3, 15, -27, 38]\n",
    "r_rafael = [\"R1\", \"R2\"]\n",
    "c_rafael = [\"C1\", \"C2\"]\n",
    "nama_matrix = np.matrix(cells).reshape(2, 2)\n",
    "print(nama_matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b4d475a1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   ID  Color  Passed\n",
      "0   1    red    True\n",
      "1   2  white    True\n",
      "2   3    red    True\n",
      "3   4    NaN   False\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "rafael1 = [1, 2, 3, 4]\n",
    "rafael2 = [\"red\", \"white\", \"red\", np.nan]  # Menggunakan np.nan untuk merepresentasikan NA\n",
    "rafael3 = [True, True, True, False]\n",
    "\n",
    "dataku = pd.DataFrame({'ID': rafael1, 'Color': rafael2, 'Passed': rafael3})\n",
    "print(dataku)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "57e4e6f8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  id   x   y\n",
      "0  a   1  11\n",
      "1  b   2  12\n",
      "2  c   3  13\n",
      "3  d   4  14\n",
      "4  e   5  15\n",
      "5  f   6  16\n",
      "6  g   7  17\n",
      "7  h   8  18\n",
      "8  i   9  19\n",
      "9  j  10  20\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "data_nama = pd.DataFrame({'id': list('abcdefghij'), 'x': list(range(1, 11)), 'y': list(range(11, 21))})\n",
    "print(data_nama)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "de2eec75",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: mysql-connector-python in c:\\appdata\\anaconda3\\lib\\site-packages (8.3.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install mysql-connector-python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4596b6e4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Hasil Kueri:\n",
      "(114300, 1790, 2, 2, 2, 'No', 'East')\n",
      "(114200, 2030, 4, 2, 3, 'No', 'East')\n",
      "(114800, 1740, 3, 2, 1, 'No', 'East')\n",
      "(94700, 1980, 3, 2, 3, 'No', 'East')\n",
      "(119800, 2130, 3, 3, 3, 'No', 'East')\n",
      "(114600, 1780, 3, 2, 2, 'No', 'North')\n",
      "(151600, 1830, 3, 3, 3, 'Yes', 'West')\n",
      "(150700, 2160, 4, 2, 2, 'No', 'West')\n",
      "(119200, 2110, 4, 2, 3, 'No', 'East')\n",
      "(104000, 1730, 3, 3, 3, 'No', 'East')\n",
      "(132500, 2030, 3, 2, 3, 'Yes', 'East')\n",
      "(123000, 1870, 2, 2, 2, 'Yes', 'East')\n",
      "(102600, 1910, 3, 2, 4, 'No', 'North')\n",
      "(126300, 2150, 3, 3, 5, 'Yes', 'North')\n",
      "(176800, 2590, 4, 3, 4, 'No', 'West')\n",
      "(145800, 1780, 4, 2, 1, 'No', 'West')\n",
      "(147100, 2190, 3, 3, 4, 'Yes', 'East')\n",
      "(83600, 1990, 3, 3, 4, 'No', 'North')\n",
      "(111400, 1700, 2, 2, 1, 'Yes', 'East')\n",
      "(167200, 1920, 3, 3, 2, 'Yes', 'West')\n",
      "(116200, 1790, 3, 2, 3, 'No', 'East')\n",
      "(113800, 2000, 3, 2, 4, 'No', 'North')\n",
      "(91700, 1690, 3, 2, 3, 'No', 'North')\n",
      "(106100, 1820, 3, 2, 3, 'Yes', 'North')\n",
      "(156400, 2210, 4, 3, 2, 'Yes', 'East')\n",
      "(149300, 2290, 4, 3, 3, 'No', 'North')\n",
      "(137000, 2000, 4, 2, 3, 'No', 'West')\n",
      "(99300, 1700, 3, 2, 2, 'No', 'East')\n",
      "(69100, 1600, 2, 2, 3, 'No', 'North')\n",
      "(188000, 2040, 4, 3, 1, 'Yes', 'West')\n",
      "(182000, 2250, 4, 3, 3, 'Yes', 'West')\n",
      "(112300, 1930, 2, 2, 2, 'Yes', 'North')\n",
      "(135000, 2250, 3, 3, 3, 'Yes', 'East')\n",
      "(139600, 2280, 5, 3, 4, 'Yes', 'East')\n",
      "(117800, 2000, 2, 2, 3, 'No', 'North')\n",
      "(117100, 2080, 3, 3, 3, 'No', 'North')\n",
      "(117500, 1880, 2, 2, 2, 'No', 'North')\n",
      "(147000, 2420, 4, 3, 4, 'No', 'West')\n",
      "(131300, 1720, 3, 2, 1, 'No', 'West')\n",
      "(108200, 1740, 3, 2, 2, 'No', 'North')\n",
      "(106600, 1560, 2, 2, 1, 'No', 'East')\n",
      "(133600, 1840, 4, 3, 2, 'No', 'West')\n",
      "(105600, 1990, 2, 2, 3, 'No', 'East')\n",
      "(154000, 1920, 3, 2, 1, 'Yes', 'East')\n",
      "(166500, 1940, 3, 3, 2, 'Yes', 'West')\n",
      "(103200, 1810, 3, 2, 3, 'No', 'East')\n",
      "(129800, 1990, 2, 3, 2, 'No', 'North')\n",
      "(90300, 2050, 3, 2, 6, 'No', 'North')\n",
      "(115900, 1980, 2, 2, 2, 'No', 'East')\n",
      "(107500, 1700, 3, 2, 3, 'Yes', 'North')\n",
      "(151100, 2100, 3, 2, 3, 'Yes', 'East')\n",
      "(91100, 1860, 2, 2, 3, 'No', 'North')\n",
      "(117400, 2150, 2, 3, 4, 'No', 'North')\n",
      "(130800, 2100, 3, 2, 3, 'No', 'North')\n",
      "(81300, 1650, 3, 2, 3, 'No', 'North')\n",
      "(125700, 1720, 2, 2, 2, 'Yes', 'East')\n",
      "(140900, 2190, 3, 2, 3, 'Yes', 'East')\n",
      "(152300, 2240, 4, 3, 3, 'No', 'West')\n",
      "(138100, 1840, 3, 3, 1, 'No', 'West')\n",
      "(155400, 2090, 4, 2, 1, 'No', 'West')\n",
      "(180900, 2200, 3, 3, 1, 'No', 'West')\n",
      "(100900, 1610, 2, 2, 2, 'No', 'North')\n",
      "(161300, 2220, 4, 3, 2, 'No', 'West')\n",
      "(120500, 1910, 2, 3, 2, 'No', 'East')\n",
      "(130300, 1860, 3, 2, 2, 'No', 'West')\n",
      "(111100, 1450, 2, 2, 1, 'Yes', 'North')\n",
      "(126200, 2210, 3, 3, 4, 'No', 'North')\n",
      "(151900, 2040, 4, 3, 3, 'No', 'East')\n",
      "(93600, 2140, 3, 2, 4, 'No', 'North')\n",
      "(165600, 2080, 4, 3, 3, 'No', 'West')\n",
      "(166700, 1950, 3, 3, 3, 'Yes', 'West')\n",
      "(157600, 2160, 4, 2, 1, 'No', 'West')\n",
      "(107300, 1650, 3, 2, 3, 'No', 'North')\n",
      "(125700, 2040, 3, 3, 2, 'No', 'East')\n",
      "(144200, 2140, 3, 3, 3, 'No', 'West')\n",
      "(106900, 1900, 2, 2, 2, 'No', 'North')\n",
      "(129800, 1930, 3, 2, 2, 'No', 'West')\n",
      "(176500, 2280, 4, 3, 3, 'Yes', 'West')\n",
      "(121300, 2130, 3, 2, 3, 'No', 'North')\n",
      "(143600, 1780, 4, 2, 1, 'No', 'West')\n",
      "(143400, 2190, 3, 3, 4, 'Yes', 'East')\n",
      "(184300, 2140, 4, 3, 2, 'Yes', 'West')\n",
      "(164800, 2050, 2, 2, 1, 'Yes', 'West')\n",
      "(147700, 2410, 3, 3, 2, 'No', 'East')\n",
      "(90500, 1520, 2, 2, 3, 'No', 'North')\n",
      "(188300, 2250, 4, 3, 2, 'Yes', 'West')\n",
      "(102700, 1900, 4, 2, 4, 'No', 'North')\n",
      "(172500, 1880, 3, 3, 1, 'Yes', 'West')\n",
      "(127700, 1930, 3, 3, 2, 'No', 'North')\n",
      "(97800, 2010, 2, 2, 4, 'No', 'North')\n",
      "(143100, 1920, 4, 2, 2, 'No', 'West')\n",
      "(116500, 2150, 3, 2, 2, 'No', 'East')\n",
      "(142600, 2110, 3, 2, 2, 'No', 'West')\n",
      "(157100, 2080, 3, 3, 2, 'No', 'East')\n",
      "(160600, 2150, 4, 3, 3, 'Yes', 'West')\n",
      "(152500, 1970, 2, 2, 1, 'Yes', 'West')\n",
      "(133300, 2440, 3, 3, 3, 'No', 'East')\n",
      "(126800, 2000, 2, 2, 1, 'Yes', 'East')\n",
      "(145500, 2060, 3, 2, 1, 'No', 'West')\n",
      "(171000, 2080, 3, 3, 2, 'Yes', 'West')\n",
      "(103200, 2010, 3, 2, 5, 'No', 'North')\n",
      "(123100, 2260, 3, 3, 5, 'No', 'East')\n",
      "(136800, 2410, 3, 3, 4, 'No', 'East')\n",
      "(211200, 2440, 4, 3, 3, 'Yes', 'West')\n",
      "(82300, 1910, 3, 2, 4, 'No', 'East')\n",
      "(146900, 2530, 4, 3, 4, 'No', 'West')\n",
      "(108500, 2130, 3, 2, 4, 'No', 'North')\n",
      "(134000, 1890, 3, 2, 1, 'Yes', 'East')\n",
      "(117000, 1990, 3, 3, 3, 'Yes', 'East')\n",
      "(108700, 2110, 3, 2, 3, 'No', 'East')\n",
      "(111600, 1710, 2, 2, 1, 'No', 'North')\n",
      "(114900, 1740, 2, 2, 2, 'No', 'North')\n",
      "(123600, 1940, 2, 2, 2, 'Yes', 'East')\n",
      "(115700, 2000, 3, 2, 3, 'Yes', 'North')\n",
      "(124500, 2010, 4, 3, 2, 'No', 'East')\n",
      "(102500, 1900, 3, 3, 3, 'No', 'North')\n",
      "(199500, 2290, 5, 4, 1, 'Yes', 'West')\n",
      "(117800, 1920, 3, 2, 2, 'No', 'North')\n",
      "(150200, 1950, 3, 2, 3, 'Yes', 'North')\n",
      "(109700, 1920, 2, 2, 4, 'No', 'North')\n",
      "(110400, 1930, 2, 3, 3, 'No', 'North')\n",
      "(105600, 1930, 3, 3, 3, 'No', 'East')\n",
      "(144800, 2060, 2, 2, 1, 'Yes', 'East')\n",
      "(119700, 1900, 3, 3, 3, 'Yes', 'East')\n",
      "(147900, 2160, 4, 3, 3, 'Yes', 'East')\n",
      "(113500, 2070, 2, 2, 2, 'No', 'North')\n",
      "(149900, 2020, 3, 3, 1, 'No', 'West')\n",
      "(124600, 2250, 3, 3, 4, 'No', 'North')\n"
     ]
    }
   ],
   "source": [
    "import mysql.connector\n",
    "\n",
    "# Membuat koneksi ke MySQL\n",
    "connection = mysql.connector.connect(\n",
    "    host=\"localhost\",\n",
    "    user=\"root\",\n",
    "    password=\"\",\n",
    "    database=\"houseprices\"\n",
    ")\n",
    "\n",
    "# Membuat objek cursor untuk mengeksekusi kueri\n",
    "cursor = connection.cursor()\n",
    "\n",
    "try:\n",
    "    # Mengeksekusi kueri SQL\n",
    "    my_query = \"SELECT * FROM houseprices_csv___houseprices_csv;\"\n",
    "    cursor.execute(my_query)\n",
    "    \n",
    "    # Mengambil semua hasil kueri\n",
    "    result = cursor.fetchall()\n",
    "    \n",
    "    # Menampilkan hasil kueri\n",
    "    print(\"\\nHasil Kueri:\")\n",
    "    for row in result:\n",
    "        print(row)\n",
    "\n",
    "finally:\n",
    "    # Menutup kursor dan koneksi\n",
    "    cursor.close()\n",
    "    connection.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "0dcb9f62",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      Price  SqFt  Bedrooms  Bathrooms  Offers Brick Neighborhood\n",
      "0    114300  1790         2          2       2    No         East\n",
      "1    114200  2030         4          2       3    No         East\n",
      "2    114800  1740         3          2       1    No         East\n",
      "3     94700  1980         3          2       3    No         East\n",
      "4    119800  2130         3          3       3    No         East\n",
      "..      ...   ...       ...        ...     ...   ...          ...\n",
      "120  110400  1930         2          3       3    No        North\n",
      "121  105600  1930         3          3       3    No         East\n",
      "125  113500  2070         2          2       2    No        North\n",
      "126  149900  2020         3          3       1    No         West\n",
      "127  124600  2250         3          3       4    No        North\n",
      "\n",
      "[86 rows x 7 columns]\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Membaca file CSV dan membuat DataFrame\n",
    "df = pd.read_csv('houseprices.csv')\n",
    "\n",
    "df_filtered = df[df['Brick'] == 'No']\n",
    "\n",
    "# Menampilkan hasil filter\n",
    "print(df_filtered)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ef04140a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      Price  SqFt  Bedrooms  Bathrooms  Offers Brick Neighborhood\n",
      "0    114300  1790         2          2       2    No         East\n",
      "1    114200  2030         4          2       3    No         East\n",
      "2    114800  1740         3          2       1    No         East\n",
      "3     94700  1980         3          2       3    No         East\n",
      "4    119800  2130         3          3       3    No         East\n",
      "..      ...   ...       ...        ...     ...   ...          ...\n",
      "123  119700  1900         3          3       3   Yes         East\n",
      "124  147900  2160         4          3       3   Yes         East\n",
      "125  113500  2070         2          2       2    No        North\n",
      "126  149900  2020         3          3       1    No         West\n",
      "127  124600  2250         3          3       4    No        North\n",
      "\n",
      "[105 rows x 7 columns]\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Membaca file CSV dan membuat DataFrame\n",
    "df = pd.read_csv('houseprices.csv')\n",
    "\n",
    "df_filtered = df[(df['Brick'] == 'No') | (df['Neighborhood'] == 'East')]\n",
    "\n",
    "# Menampilkan hasil filter\n",
    "print(df_filtered)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "01c33d6b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>LOKASI UNIT KERJA LAMA</th>\n",
       "      <th>LOKASI UNIT KERJA BARU</th>\n",
       "      <th>TUNJANGAN HARIAN</th>\n",
       "      <th>PENGEPAKAN BARANG</th>\n",
       "      <th>BIAYA HOTEL</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>JAKARTA</td>\n",
       "      <td>SEMARANG</td>\n",
       "      <td>8500000</td>\n",
       "      <td>2400000</td>\n",
       "      <td>6400000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>JAKARTA</td>\n",
       "      <td>SEMARANG</td>\n",
       "      <td>9000000</td>\n",
       "      <td>2400000</td>\n",
       "      <td>6400000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>JAKARTA</td>\n",
       "      <td>SEMARANG</td>\n",
       "      <td>11250000</td>\n",
       "      <td>3000000</td>\n",
       "      <td>9600000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>JAKARTA</td>\n",
       "      <td>JOGYAKARTA</td>\n",
       "      <td>2250000</td>\n",
       "      <td>1200000</td>\n",
       "      <td>3200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>SURABAYA</td>\n",
       "      <td>MANADO</td>\n",
       "      <td>4500000</td>\n",
       "      <td>7200000</td>\n",
       "      <td>3200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>TANGERANG</td>\n",
       "      <td>JOGYAKARTA</td>\n",
       "      <td>3500000</td>\n",
       "      <td>1800000</td>\n",
       "      <td>4000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>JAKARTA</td>\n",
       "      <td>JOGYAKARTA</td>\n",
       "      <td>2125000</td>\n",
       "      <td>600000</td>\n",
       "      <td>3200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>MANADO</td>\n",
       "      <td>JAKARTA</td>\n",
       "      <td>2250000</td>\n",
       "      <td>6400000</td>\n",
       "      <td>3200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>BOGOR</td>\n",
       "      <td>JOGYAKARTA</td>\n",
       "      <td>4250000</td>\n",
       "      <td>600000</td>\n",
       "      <td>3200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>JAKARTA</td>\n",
       "      <td>BOYOLALI</td>\n",
       "      <td>10625000</td>\n",
       "      <td>2300000</td>\n",
       "      <td>9600000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>JAKARTA</td>\n",
       "      <td>SURABAYA</td>\n",
       "      <td>2250000</td>\n",
       "      <td>2000000</td>\n",
       "      <td>3200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>SURABAYA</td>\n",
       "      <td>MADIUN</td>\n",
       "      <td>2125000</td>\n",
       "      <td>800000</td>\n",
       "      <td>3200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>MADIUN</td>\n",
       "      <td>JAKARTA</td>\n",
       "      <td>2125000</td>\n",
       "      <td>2000000</td>\n",
       "      <td>3200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>MEDAN</td>\n",
       "      <td>BEKASI</td>\n",
       "      <td>2500000</td>\n",
       "      <td>3800000</td>\n",
       "      <td>3200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>SURABAYA</td>\n",
       "      <td>JAKARTA</td>\n",
       "      <td>2125000</td>\n",
       "      <td>400000</td>\n",
       "      <td>3200000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   LOKASI UNIT KERJA LAMA LOKASI UNIT KERJA BARU  TUNJANGAN HARIAN  \\\n",
       "0                 JAKARTA               SEMARANG           8500000   \n",
       "1                 JAKARTA               SEMARANG           9000000   \n",
       "2                 JAKARTA               SEMARANG          11250000   \n",
       "3                 JAKARTA             JOGYAKARTA           2250000   \n",
       "4                SURABAYA                 MANADO           4500000   \n",
       "5               TANGERANG             JOGYAKARTA           3500000   \n",
       "6                 JAKARTA             JOGYAKARTA           2125000   \n",
       "7                  MANADO                JAKARTA           2250000   \n",
       "8                   BOGOR             JOGYAKARTA           4250000   \n",
       "9                 JAKARTA               BOYOLALI          10625000   \n",
       "10                JAKARTA               SURABAYA           2250000   \n",
       "11               SURABAYA                 MADIUN           2125000   \n",
       "12                 MADIUN                JAKARTA           2125000   \n",
       "13                  MEDAN                 BEKASI           2500000   \n",
       "14               SURABAYA                JAKARTA           2125000   \n",
       "\n",
       "    PENGEPAKAN BARANG  BIAYA HOTEL  \n",
       "0             2400000      6400000  \n",
       "1             2400000      6400000  \n",
       "2             3000000      9600000  \n",
       "3             1200000      3200000  \n",
       "4             7200000      3200000  \n",
       "5             1800000      4000000  \n",
       "6              600000      3200000  \n",
       "7             6400000      3200000  \n",
       "8              600000      3200000  \n",
       "9             2300000      9600000  \n",
       "10            2000000      3200000  \n",
       "11             800000      3200000  \n",
       "12            2000000      3200000  \n",
       "13            3800000      3200000  \n",
       "14             400000      3200000  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "df = pd.read_excel('data_prak_distribusi.xlsx') \n",
    "df.head(15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "10db495a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Rata-rata dari kolom 'BIAYA HOTEL': 4023300.9708737866\n",
      "Standar Deviasi dari kolom 'BIAYA HOTEL': 1472413.2416128046\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt \n",
    "from scipy.stats import norm\n",
    "\n",
    "# Baca file Excel\n",
    "df = pd.read_excel('data_prak_distribusi.xlsx')\n",
    "\n",
    "# Pilih kolom yang ingin digunakan (kolom_pilihan: BIAYA HOTEL untuk absen genap)\n",
    "kolom_pilihan = 'BIAYA HOTEL'\n",
    "\n",
    "# Ambil data dari kolom yang dipilih\n",
    "data_nama = df[kolom_pilihan]\n",
    "\n",
    "# Hitung rata-rata dan standar deviasi dari data\n",
    "mean_nama = np.mean(data_nama)\n",
    "stddev_nama = np.std(data_nama)\n",
    "\n",
    "# Cetak statistik deskriptif\n",
    "print(f\"Rata-rata dari kolom '{kolom_pilihan}': {mean_nama}\")\n",
    "print(f\"Standar Deviasi dari kolom '{kolom_pilihan}': {stddev_nama}\")\n",
    "\n",
    "# Plot distribusi normal\n",
    "x = np.linspace(min(data_nama), max(data_nama), 100)\n",
    "plt.plot(x, norm.pdf(x, mean_nama, stddev_nama), label='Distribusi Normal')\n",
    "\n",
    "# Plot histogram dari data\n",
    "plt.hist(data_nama, bins=30, density=True, alpha=0.6, color='g', label='Histogram')\n",
    "plt.title('Praktikum Distribusi Normal')\n",
    "plt.xlabel('Nilai')\n",
    "plt.ylabel('Frekuensi Relatif')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "dab1e38e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Probabilitas (0): 0.5000000000000001\n",
      "Probabilitas (1): 0.5\n",
      "Rata-rata: 0.5\n",
      "Varians: 0.25\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "from scipy.stats import bernoulli\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Probabilitas keberhasilan (p)\n",
    "p = 0.5\n",
    "\n",
    "# Menentukan distribusi Bernoulli\n",
    "distribusi_bernoulli = bernoulli(p)\n",
    "\n",
    "# Menghitung probabilitas untuk nilai 0 dan 1\n",
    "probabilitas_0 = distribusi_bernoulli.pmf(0)\n",
    "probabilitas_1 = distribusi_bernoulli.pmf(1)\n",
    "\n",
    "# Menghitung rata-rata (mean) dan varians\n",
    "rata_rata = distribusi_bernoulli.mean()\n",
    "varians = distribusi_bernoulli.var()\n",
    "\n",
    "# Mencetak hasil analisis\n",
    "print('Probabilitas (0):', probabilitas_0)\n",
    "print('Probabilitas (1):', probabilitas_1)\n",
    "print('Rata-rata:', rata_rata)\n",
    "print('Varians:', varians)\n",
    "\n",
    "# Memvisualisasikan distribusi Bernoulli\n",
    "plt.plot(np.arange(2), distribusi_bernoulli.pmf(np.arange(2)), 'o-')\n",
    "plt.xlabel('Nilai Data')\n",
    "plt.ylabel('Probabilitas')\n",
    "plt.title('Distribusi Bernoulli')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c026e0c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Probabilitas: [0.00024414 0.00292969 0.01611328 0.05371094 0.12084961 0.19335938\n",
      " 0.22558594 0.19335938 0.12084961 0.05371094 0.01611328 0.00292969\n",
      " 0.00024414]\n",
      "Rata-rata: 6.0\n",
      "Varians: 3.0\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "from scipy.stats import binom\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Jumlah percobaan (n)\n",
    "n = 12  # Menyesuaikan nilai n untuk absen genap (>10 dan kelipatan genap)\n",
    "\n",
    "# Probabilitas keberhasilan (p)\n",
    "p = 0.5\n",
    "\n",
    "# Menentukan distribusi binomial\n",
    "distribusi_binom = binom(n, p)\n",
    "\n",
    "# Menghitung probabilitas untuk k = 0, 1, ..., n\n",
    "probabilitas = distribusi_binom.pmf(np.arange(n + 1))\n",
    "\n",
    "# Menghitung rata-rata (mean) dan varians\n",
    "rata_rata = distribusi_binom.mean()\n",
    "varians = distribusi_binom.var()\n",
    "\n",
    "# Mencetak hasil analisis\n",
    "print('Probabilitas:', probabilitas)\n",
    "print('Rata-rata:', rata_rata)\n",
    "print('Varians:', varians)\n",
    "\n",
    "# Memvisualisasikan distribusi binomial\n",
    "plt.plot(np.arange(n + 1), probabilitas, 'o-')\n",
    "plt.xlabel('Jumlah Keberhasilan (k)')\n",
    "plt.ylabel('Probabilitas')\n",
    "plt.title('Distribusi Binomial')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "580055de",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Hasil Kueri:\n",
      "('Putra', 'laki - laki', 2023, 170, 150, 'Bekasi', None)\n",
      "('Rafiq', 'laki - laki', 2023, 170, 30, 'Kampung Tengah', None)\n",
      "('Faiz Abyan Heryanto', 'laki - laki', 2023, 165, 45, 'Tanjung Priuk', ' ')\n",
      "('Michael', 'laki - laki', 2023, 167, 15, 'Jakarta Utara', None)\n",
      "('partahi daniel tua limbong', 'laki - laki', 2023, 173, 45, 'jakarta utara', None)\n",
      "('hafidz ramadhan', 'laki - laki', 2023, 169, 15, 'Grogol', None)\n",
      "('Francisco', 'laki - laki', 2023, 170, 30, 'daan mogort ', None)\n",
      "('Muhammad Rayyan Naufal ', 'laki - laki', 2023, 171, 50, 'Jakarta Timur', None)\n",
      "('Yustianas Rombon ', 'laki - laki', 2023, 173, 30, 'Jakarta Utara ', None)\n",
      "('Zahwa Nur Azkia Putri', 'perempuan', 2023, 154, 15, 'grogol', None)\n",
      "('Dave F.M', 'laki - laki', 2023, 168, 60, 'Tangerang ', None)\n",
      "('Calista Azzahra', 'perempuan', 2023, 160, 150, 'Bekasi', None)\n",
      "('Fairuz', 'perempuan', 2023, 156, 45, 'Tanjung Priok', None)\n",
      "('Gwen Alaina Marela ', 'perempuan', 2023, 152, 17, 'Gambir', None)\n",
      "('Michael Briant', 'laki - laki', 2023, 167, 10, 'Jl. Tawakal', None)\n",
      "('ariel febrio', 'laki - laki', 2023, 170, 35, 'kelapa gading', None)\n",
      "('Rasyid Ridho Muhammad Noor Rafi', 'laki - laki', 2023, 170, 45, 'Cengkareng', None)\n",
      "('Monic', 'perempuan', 2023, 160, 75, 'Jakarta Timur', None)\n",
      "('Mara Sutan Arrafi Siregar', 'laki - laki', 2023, 170, 90, 'Sunter Kelapa gading', None)\n",
      "('Zulfadli Daniswara', 'laki - laki', 2023, 170, 45, 'Kampung Makasar ', None)\n",
      "('Rangga Aditya Pradana', 'laki - laki', 2023, 185, 90, 'Kota Bekasi', None)\n",
      "('Mutiara Novianti Rambe', 'perempuan', 2023, 160, 60, 'Pejaten', 'Jakarta Selatan')\n",
      "('Faiz Firdaus Priyanto', 'laki - laki', 2023, 165, 30, 'Jakarta ', None)\n",
      "('rafael gala herlambang', 'laki - laki', 2023, 175, 15, 'gunung sahari', None)\n",
      "('Noval Susanto ', 'laki - laki', 2023, 177, 60, 'Depok', None)\n",
      "('Fadhil Ibrahim Wira Dharna', 'laki - laki', 2023, 169, 60, 'Cipadu', None)\n",
      "('Kevin Rizky Pradana', 'laki - laki', 2023, 173, 60, 'Duren Sawit', None)\n",
      "('Dewanto Maulana Sukaro Putra', 'laki - laki', 2023, 172, 40, 'Tanjung Priok', None)\n",
      "('Arik Dias Putra', 'laki - laki', 2023, 177, 60, 'Tangerang', None)\n",
      "('Muhammad Hakim ', 'laki - laki', 2023, 170, 10, 'Tamansari ', None)\n",
      "('Andrew Hendrian Nathanael', 'laki - laki', 2023, 172, 13, 'tomang', None)\n",
      "('NUZURUL HAQI FADILLAH', 'laki - laki', 2023, 171, 60, 'Tangerang', None)\n",
      "('Putri', 'perempuan', 2023, 155, 10, 'Muwardi', None)\n",
      "('April', 'perempuan', 2023, 155, 10, 'Muwardi', None)\n",
      "('Naya', 'perempuan', 2023, 165, 10, 'Tawakal', None)\n"
     ]
    }
   ],
   "source": [
    "import mysql.connector\n",
    "\n",
    "# Membuat koneksi ke MySQL\n",
    "connection = mysql.connector.connect(\n",
    "    host=\"localhost\",\n",
    "    user=\"root\",\n",
    "    password=\"\",\n",
    "    database=\"ps2[rafael]\"\n",
    ")\n",
    "\n",
    "# Membuat objek cursor untuk mengeksekusi kueri\n",
    "cursor = connection.cursor()\n",
    "\n",
    "try:\n",
    "    # Mengeksekusi kueri SQL\n",
    "    my_query = \"SELECT * FROM data_prob_statistika__jawaban_;\"\n",
    "    cursor.execute(my_query)\n",
    "    \n",
    "    # Mengambil semua hasil kueri\n",
    "    result = cursor.fetchall()\n",
    "    \n",
    "    # Menampilkan hasil kueri\n",
    "    print(\"\\nHasil Kueri:\")\n",
    "    for row in result:\n",
    "        print(row)\n",
    "\n",
    "finally:\n",
    "    # Menutup kursor dan koneksi\n",
    "    cursor.close()\n",
    "    connection.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "5c24e6bd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Unnamed: 0                     nama lengkap       gender  angkatan  \\\n",
      "0          NaN                            Putra  laki - laki    2023.0   \n",
      "1          NaN                            Rafiq  laki - laki    2023.0   \n",
      "2          NaN              Faiz Abyan Heryanto  laki - laki    2023.0   \n",
      "3          NaN                          Michael  laki - laki    2023.0   \n",
      "4          NaN       partahi daniel tua limbong  laki - laki    2023.0   \n",
      "5          NaN                  hafidz ramadhan  laki - laki    2023.0   \n",
      "6          NaN                        Francisco  laki - laki    2023.0   \n",
      "7          NaN          Muhammad Rayyan Naufal   laki - laki    2023.0   \n",
      "8          NaN                Yustianas Rombon   laki - laki    2023.0   \n",
      "10         NaN                         Dave F.M  laki - laki    2023.0   \n",
      "14         NaN                   Michael Briant  laki - laki    2023.0   \n",
      "15         NaN                     ariel febrio  laki - laki    2023.0   \n",
      "16         NaN  Rasyid Ridho Muhammad Noor Rafi  laki - laki    2023.0   \n",
      "18         NaN        Mara Sutan Arrafi Siregar  laki - laki    2023.0   \n",
      "19         NaN               Zulfadli Daniswara  laki - laki    2023.0   \n",
      "20         NaN            Rangga Aditya Pradana  laki - laki    2023.0   \n",
      "22         NaN            Faiz Firdaus Priyanto  laki - laki    2023.0   \n",
      "23         NaN           rafael gala herlambang  laki - laki    2023.0   \n",
      "24         NaN                   Noval Susanto   laki - laki    2023.0   \n",
      "25         NaN       Fadhil Ibrahim Wira Dharna  laki - laki    2023.0   \n",
      "26         NaN              Kevin Rizky Pradana  laki - laki    2023.0   \n",
      "27         NaN     Dewanto Maulana Sukaro Putra  laki - laki    2023.0   \n",
      "28         NaN                  Arik Dias Putra  laki - laki    2023.0   \n",
      "29         NaN                  Muhammad Hakim   laki - laki    2023.0   \n",
      "30         NaN        Andrew Hendrian Nathanael  laki - laki    2023.0   \n",
      "31         NaN            NUZURUL HAQI FADILLAH  laki - laki    2023.0   \n",
      "\n",
      "    tinggi badan  waktu perjalanan / menit       wilayah tinggal  \n",
      "0          170.0                     150.0                Bekasi  \n",
      "1          170.0                      30.0        Kampung Tengah  \n",
      "2          165.0                      45.0       Tanjung Priuk,   \n",
      "3          167.0                      15.0         Jakarta Utara  \n",
      "4          173.0                      45.0         jakarta utara  \n",
      "5          169.0                      15.0                Grogol  \n",
      "6          170.0                      30.0          daan mogort   \n",
      "7          171.0                      50.0         Jakarta Timur  \n",
      "8          173.0                      30.0        Jakarta Utara   \n",
      "10         168.0                      60.0            Tangerang   \n",
      "14         167.0                      10.0           Jl. Tawakal  \n",
      "15         170.0                      35.0         kelapa gading  \n",
      "16         170.0                      45.0            Cengkareng  \n",
      "18         170.0                      90.0  Sunter Kelapa gading  \n",
      "19         170.0                      45.0      Kampung Makasar   \n",
      "20         185.0                      90.0           Kota Bekasi  \n",
      "22         165.0                      30.0              Jakarta   \n",
      "23         175.0                      15.0         gunung sahari  \n",
      "24         177.0                      60.0                 Depok  \n",
      "25         169.0                      60.0                Cipadu  \n",
      "26         173.0                      60.0           Duren Sawit  \n",
      "27         172.0                      40.0         Tanjung Priok  \n",
      "28         177.0                      60.0             Tangerang  \n",
      "29         170.0                      10.0            Tamansari   \n",
      "30         172.0                      13.0                tomang  \n",
      "31         171.0                      60.0             Tangerang  \n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Membaca file CSV dan membuat DataFrame\n",
    "df = pd.read_csv('Data prob&statistika.csv')\n",
    "\n",
    "# Melakukan filter data berdasarkan kolom Gender\n",
    "df_filtered = df[df['gender'] == 'laki - laki']\n",
    "\n",
    "# Menampilkan semua data yang telah difilter berdasarkan Gender\n",
    "print(df_filtered)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c7a10ede",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
